{"version":3,"file":"voicenter-events-sdk.umd.js","sources":["../src/eventTypes.js","../src/config.js","../src/Logger.js","../node_modules/lodash/isObject.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_root.js","../node_modules/lodash/now.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/isObjectLike.js","../node_modules/lodash/isSymbol.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/debounce.js","../src/store/handleStoreEvents.js","../src/utils/statusTypes.js","../src/store/extensions.js","../src/store/queues.js","../src/sdk.js","../src/utils/loadExternalScript.js","../src/utils.js","../src/utils/externalLogin.js","../src/index.js"],"sourcesContent":["export default {\n  LOGIN_STATUS: 'loginStatus',\n  LOGIN: 'login',\n  LOGIN_USER: 'loginUser',\n  LOGIN_CODE: 'loginUserCode',\n  LOGIN_ACCOUNT: 'loginAccount',\n  LOGIN_RESPONSE: 'loginResponse',\n  QUEUE_EVENT: 'QueueEvent',\n  QUEUES_UPDATED: 'QueuesUpdated',\n  DIALERS_UPDATED: 'DialersUpdated',\n  EXTENSION_EVENT: 'ExtensionEvent',\n  EXTENSION_UPDATED: 'ExtensionsUpdated',\n  ALL_EXTENSION_STATUS: 'AllExtensionsStatus',\n  CONNECT: 'connect',\n  CONNECT_ERROR: 'connect_error',\n  CONNECT_TIMEOUT: 'connect_timeout',\n  DISCONNECT: 'disconnect',\n  PONG: 'pong',\n  RECONNECT: 'reconnect',\n  RECONNECT_ATTEMPT: 'reconnect_attempt',\n  RESYNC: 'resync',\n  RECONNECTING: 'reconnecting',\n  RECONNECT_ERROR: 'reconnect_error',\n  RECONNECT_FAILED: 'reconnect_failed',\n  KEEP_ALIVE: 'keepalive',\n  KEEP_ALIVE_RESPONSE: 'keepaliveResponse',\n  CLOSE: 'closeme',\n  ERROR: 'error',\n}\n","export const defaultServers = [{\n  'URLID': 59,\n  'Priority': 5,\n  'Version': 2,\n  'Domain': 'monitor1.voicenter.co'\n}, {\n  'URLID': 3,\n  'Priority': 4,\n  'Version': 2,\n  'Domain': 'monitor3.voicenter.co.il'\n}, {\n  'URLID': 4,\n  'Priority': 3,\n  'Version': 2,\n  'Domain': 'monitor4.voicenter.co.il'\n}, {\n  'URLID': 11,\n  'Priority': 2,\n  'Version': 2,\n  'Domain': 'monitor11.voicenter.co'\n}, {\n  'URLID': 5,\n  'Priority': 0,\n  'Version': 2,\n  'Domain': 'monitor5.voicenter.co.il'\n}];\n","\nclass Logger {\n  constructor(options = {}) {\n    this.debug = options.debug\n  }\n\n  /**\n   * Logs to console a colored message\n   * @param message\n   * @param data\n   * @private\n   */\n  _log(message, data) {\n    let toLog = data ? `${message}, %c Data -> ${JSON.stringify(data)}` : `${message}`\n    let now = new Date().toUTCString()\n    console.log(`%c ${now}: %c ${toLog}`, `color: #276749;`, `color: #4299e1;`, `color: #2c3e50;`)\n  }\n\n  /**\n   * Logs to console a colored message\n   * @param message\n   * @param data\n   * @private\n   */\n  _error(message, data) {\n    let toLog = data ? `${message}, Data -> ${JSON.stringify(data)}` : `${message}`\n    let now = new Date().toUTCString()\n    console.error(`${now}: ${toLog}`)\n  }\n\n  /**\n   * Logs messages in case debug mode is set\n   * @param message\n   * @param data\n   */\n  log(message, data) {\n    if (this.debug) {\n      if (message && !data) {\n        this._log(message)\n      } else {\n        this._log(message, data)\n      }\n    }\n  }\n  /**\n   * Logs error messages in case debug mode is set\n   * @param message\n   * @param data\n   */\n  error(message, data) {\n    if (this.debug) {\n      if (message && !data) {\n        this._error(message)\n      } else {\n        this._error(message, data)\n      }\n    }\n  }\n}\n\nexport default Logger\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","import eventTypes from '../eventTypes';\n\nexport const sdkEventReasons = {\n  NEWCALL: 'NEWCALL',\n  ANSWER: 'ANSWER',\n  HANGUP: 'HANGUP'\n}\nconst offlineEvents = [\n  eventTypes.CONNECT_ERROR,\n  eventTypes.CONNECT_TIMEOUT,\n  eventTypes.DISCONNECT,\n  eventTypes.RECONNECT_ATTEMPT,\n  eventTypes.RECONNECTING,\n  eventTypes.RECONNECT_ERROR,\n  eventTypes.RECONNECT_FAILED,\n  sdkEventReasons.CLOSE\n]\n\nfunction isSocketOffline(event) {\n  let { name } = event\n  return offlineEvents.includes(name)\n}\n\nexport default function onNewEvent({ eventData, store, extensionsModuleName, queuesModuleName }) {\n  let { name, data } = eventData\n  store.commit(`${extensionsModuleName}/SET_IS_SOCKET_OFFLINE`, isSocketOffline(eventData))\n  switch (name) {\n    case eventTypes.ALL_EXTENSION_STATUS:\n      store.dispatch(`${extensionsModuleName}/setExtensions`, data.extensions)\n      break;\n    case eventTypes.EXTENSION_EVENT:\n      let extension = data.data\n      // Event reason: NEWCALL/ANSWER/HANGUP\n      extension['lastEvent'] = {\n        reason: data.reason,\n        ivrid: data.ivruniqueid\n      }\n      const extensions = store.state[extensionsModuleName].extensions\n      let extensionIndex = extensions.findIndex(e => e.userID === extension.userID)\n      if (extensionIndex !== -1) {\n        store.dispatch(`${extensionsModuleName}/updateExtension`, {\n          index: extensionIndex,\n          extension\n        })\n      }\n      break;\n    case eventTypes.LOGIN_STATUS:\n      store.commit(`${extensionsModuleName}/SET_SERVER_TIME`, data)\n      store.dispatch(`${queuesModuleName}/setQueues`, data.queues)\n      break;\n    case eventTypes.QUEUE_EVENT:\n      let queue = data.data;\n      const allQueues = store.state[queuesModuleName].all || []\n      let queueIndex = allQueues.findIndex(e => e.QueueID === queue.QueueID)\n      if (queueIndex !== -1) {\n        store.dispatch(`${queuesModuleName}/updateQueue`, {\n          index: queueIndex,\n          queue\n        })\n      }\n      break;\n    default:\n      break;\n  }\n}\n","import colors from \"./colors\";\n\nexport const callStatuses = {\n  CALLING: 100,\n  HOLD: 101,\n}\n\nexport default {\n  1: {\n    icon: \"IconLogin\",\n    color: colors.LOGIN_COLOR,\n    text: 'status.login',\n    value: 1\n  },\n  2: {\n    icon: \"IconLogout\",\n    color: colors.LOGOUT_COLOR,\n    text: 'status.logout',\n    value: 2\n  },\n  3: {\n    icon: \"IconLunch\",\n    color: colors.LUNCH_COLOR,\n    text: 'status.lunch',\n    value: 3\n  },\n  5: {\n    icon: \"IconAdministrative\",\n    color: colors.ADMINISTRATIVE_COLOR,\n    text: 'status.administrative',\n    value: 5\n  },\n  7: {\n    icon: \"IconPrivate\",\n    color: colors.PRIVATE_COLOR,\n    text: 'status.private',\n    value: 7\n  },\n  9: {\n    icon: \"IconOther\",\n    color: colors.OTHER_COLOR,\n    text: 'status.other',\n    value: 9\n  },\n  11: {\n    icon: \"IconTraining\",\n    color: colors.TRAINING_COLOR,\n    text: 'status.training',\n    value: 11\n  },\n  12: {\n    icon: \"IconTeamMeeting\",\n    color: colors.TEAM_MEETING_COLOR,\n    text: 'status.teamMeeting',\n    value: 12\n  },\n  13: {\n    icon: \"IconBrief\",\n    color: colors.BRIEF_COLOR,\n    text: 'status.brief',\n    value: 13\n  },\n  100: {\n    icon: 'IconIncomingCall',\n    color: colors.LIGHT_GREEN,\n    text: 'status.incall',\n    value: 100\n  },\n  101: {\n    icon: 'IconHold',\n    color: colors.HOLD_COLOR,\n    text: 'status.hold',\n    value: 101\n  }\n}\n","import { callStatuses } from '../utils/statusTypes';\n\nconst ISRAEL_TIMEZONE_OFFSET = 180 * 60 * 1000;\nconst MINUTE = 60 * 1000\nconst LOGOUT_STATUS = 2;\nconst LOGIN_STATUS = 1;\nconst HOLD_STATUS = 'hold'\n\nconst types = {\n    SET_EXTENSIONS: 'SET_EXTENSIONS',\n    UPDATE_EXTENSIONS: 'UPDATE_EXTENSIONS',\n    SET_SERVER_TIME: 'SET_SERVER_TIME',\n    SET_IS_SOCKET_OFFLINE: 'SET_IS_SOCKET_OFFLINE',\n};\nconst state = {\n    extensions: [],\n    serverTime: null,\n    serverDelta: 0,\n    serverOffset: 0,\n    isSocketOffline: false,\n    offlineSocketTimestamp: null\n};\n\nconst mutations = {\n    [types.SET_EXTENSIONS]: (state, value) => {\n        state.extensions = value\n    },\n    [types.UPDATE_EXTENSIONS]: (state, {index, extension}) => {\n        state.extensions.splice(index, 1, extension)\n    },\n    [types.SET_SERVER_TIME]: (state, value) => {\n        state.serverOffset = value.servertimeoffset * 60 * 1000 || ISRAEL_TIMEZONE_OFFSET\n        state.serverTime = value.servertime * 1000 - state.serverOffset\n        state.serverDelta = new Date().getTime() - state.serverTime\n    },\n    [types.SET_IS_SOCKET_OFFLINE]: (state, value) => {\n        state.isSocketOffline = value\n        if (value) {\n            state.offlineSocketTimestamp = new Date().getTime()\n        } else {\n            state.offlineSocketTimestamp = null\n        }\n    }\n};\n\nconst actions = {\n    async setExtensions({commit}, value) {\n        commit(types.SET_EXTENSIONS, value)\n    },\n    async updateExtension({commit}, value) {\n        commit(types.UPDATE_EXTENSIONS, value)\n    },\n};\n\nfunction isCallOnHold(call = {}) {\n  let status = call.callstatus || ''\n  status = status.toLowerCase()\n  return call.answered && status === HOLD_STATUS\n}\n\nconst getters = {\n  isSocketOffline: state => {\n    if (!state.offlineSocketTimestamp || isNaN(state.offlineSocketTimestamp)) {\n      return false\n    }\n    const now = new Date().getTime()\n    // show after 1 minute of disconnect\n    return state.isSocketOffline && now - state.offlineSocketTimestamp > MINUTE\n  },\n  extensionsWithCalls: state => hideLoggedOutUsers => {\n    let groupedExtensions = [];\n\n    state.extensions.forEach((extension) => {\n\n      if (extension.calls.length > 0) {\n        if (extension.calls.filter(isCallOnHold).length) {\n          extension['representativeStatus'] = callStatuses.HOLD;\n        } else {\n          extension['representativeStatus'] = callStatuses.CALLING;\n        }\n      }\n      groupedExtensions.push(extension);\n    });\n\n    if (hideLoggedOutUsers) {\n      return groupedExtensions.filter(e => e.representativeStatus !== LOGOUT_STATUS);\n    }\n    return groupedExtensions;\n  },\n  extensionCountByStatus: (state, getters) => status => {\n    return getters.extensionsWithCalls.filter(el => el.representativeStatus === status).length || 0\n  }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions,\n    getters,\n};\n","const types = {\n    SET_QUEUES: 'SET_QUEUES',\n    UPDATE_QUEUES: 'UPDATE_QUEUES',\n}\nconst state = {\n    all: [],\n}\n\nconst mutations = {\n    [types.SET_QUEUES]: (state, value) => {\n        state.all = value\n    },\n    [types.UPDATE_QUEUES]: (state, {index, queue}) => {\n        state.all.splice(index, 1, queue)\n    },\n}\n\nconst actions = {\n    async setQueues({commit}, value) {\n        commit(types.SET_QUEUES, value)\n    },\n    async updateQueue({commit}, value) {\n        commit(types.UPDATE_QUEUES, value)\n    },\n}\n\nconst getters = {\n  queueWithActiveCalls: (state) => {\n    return state.all.filter((el) => el.Calls.length)\n  },\n  allQueueCalls: (state, getters) => {\n    const allCalls = []\n    getters.queueWithActiveCalls.forEach((queue) => {\n      const calls = queue.Calls || []\n      allCalls.push(...calls)\n    })\n    return allCalls\n  },\n  filterQueuesByIds: (state) => queueIds => {\n    if (!queueIds || !Array.isArray(queueIds)) {\n      return state.all\n    }\n    return state.all.filter(e => queueIds.includes(e.QueueID))\n  }\n}\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions,\n    getters,\n}\n","import eventTypes from './eventTypes';\nimport { defaultServers } from './config';\nimport Logger from './Logger';\nimport debounce from 'lodash/debounce'\nimport handleStoreEvents from './store/handleStoreEvents'\nimport extensionsModule from './store/extensions'\nimport queuesModule from './store/queues'\nimport { getServerWithHighestPriority, isValidDate } from './utils';\nimport { externalLogin, refreshToken, getExternalLoginUrl } from './utils/externalLogin';\nimport { loadExternalScript } from './utils/loadExternalScript'\n\nconst defaultOptions = {\n  url: `https://monitorapi.voicenter.co.il/monitorAPI/getMonitorUrls`,\n  fallbackServer: {\n    Domain: 'monitor5.voicenter.co.il',\n    Priority: 0,\n  },\n  loginUrl: 'https://loginapi.voicenter.co.il/monitorAPI/Login',\n  refreshTokenUrl: 'https://loginapi.voicenter.co.il/monitorAPI/RefreshIdentityToken',\n  servers: defaultServers,\n  token: null,\n  loginType: 'token',\n  forceNew: true,\n  reconnectionDelay: 10000,\n  reconnectionDelayMax: 10000,\n  maxReconnectAttempts: 2,\n  timeout: 10000,\n  keepAliveTimeout: 60000,\n  idleInterval: 60000 * 5, // 5 minutes\n  protocol: 'https',\n  transports: ['websocket'],\n  upgrade: false,\n  store: null,\n  extensionsModuleName: 'sdkExtensions',\n  queuesModuleName: 'sdkQueues',\n  serverFetchStrategy: 'remote', // get servers from external url options: remote | static\n  serverType: null, // can be 1 or 2. 2 is used for chrome extension\n};\n\nlet allConnections = [];\nlet listenersMap = new Map();\n\nclass EventsSDK {\n  constructor(options = {}) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n    this.argumentOptions = {\n      ...options\n    }\n    if (!this.options.loginType) {\n      throw new Error('A login type should be provided');\n    }\n    this.Logger = new Logger(this.options);\n    this.servers = [];\n    this.server = null;\n    this.socket = null;\n    this.connected = false;\n    this.connectionEstablished = false;\n    this._lastEventTimestamp = new Date().getTime();\n    this._initReconnectOptions();\n    this._listenersMap = listenersMap;\n    this._retryConnection = debounce(this._connect.bind(this), this.reconnectOptions.reconnectionDelay, {\n      leading: true,\n      trailing: false\n    });\n    this._lastLoginTimestamp = null;\n    this._handleLocalEvents = false;\n    this._registerExtensionsModule();\n    this._registerQueueModule();\n  }\n\n  getLastEventTimestamp() {\n    return this._lastEventTimestamp\n  }\n  _reSync () {\n    this.emit(eventTypes.RESYNC, {\n      cache: false\n    });\n  }\n  _registerExtensionsModule() {\n    const moduleName = this.options.extensionsModuleName || 'sdkExtensions'\n    if (!this._validateStoreModule(moduleName)) {\n      return\n    }\n    this.options.store.registerModule(moduleName, extensionsModule)\n    this._handleLocalEvents = true\n  }\n\n  _registerQueueModule() {\n    const moduleName = this.options.queuesModuleName || 'sdkQueues'\n    if (!this._validateStoreModule(moduleName)) {\n      return\n    }\n    this.options.store.registerModule(moduleName, queuesModule)\n    this._handleLocalEvents = true\n  }\n\n  _validateStoreModule(moduleName) {\n    const { store } = this.options\n    if (!store) {\n      return false\n    }\n    if (store.state[moduleName]) {\n      store.unregisterModule(moduleName)\n    }\n    return true\n  }\n\n  _initReconnectOptions() {\n    this.reconnectOptions = {\n      retryCount: 1,\n      maxReconnectAttempts: this.options.maxReconnectAttempts,\n      reconnectionDelay: this.options.reconnectionDelay, // 10 seconds. After each re-connection attempt this number will increase (minReconnectionDelay * attempts) => 10, 20, 30, 40 seconds ... up to 5min\n      minReconnectionDelay: this.options.reconnectionDelay, // 10 seconds\n      maxReconnectionDelay: 60000 * 5 // 5 minutes\n    }\n  }\n\n  _onConnect() {\n    this._initReconnectDelays();\n    this.connected = true;\n    this.Logger.log(eventTypes.CONNECT, this.reconnectOptions);\n  }\n\n  _initReconnectDelays() {\n    this.reconnectOptions.retryCount = 1;\n    let minReconnectDelay = this.reconnectOptions.minReconnectionDelay;\n    this.reconnectOptions.reconnectionDelay = minReconnectDelay;\n    this.socket.io.reconnectionDelay(minReconnectDelay);\n    this.socket.io.reconnectionDelayMax(minReconnectDelay);\n  }\n\n  _onConnectError(data) {\n    this._retryConnection('next');\n    this.connected = false;\n    this.Logger.log(eventTypes.CONNECT_ERROR, data)\n  }\n\n  _onError(err) {\n    this.Logger.log(eventTypes.ERROR, err);\n  }\n\n  _onReconnectFailed() {\n    this._retryConnection('next');\n    this.Logger.log(eventTypes.RECONNECT_FAILED, this.reconnectOptions);\n  }\n\n  _onConnectTimeout() {\n    this._retryConnection('next');\n    this.Logger.log(eventTypes.CONNECT_TIMEOUT, this.reconnectOptions)\n  }\n\n  _onReconnectAttempt() {\n    if (this.reconnectOptions.retryCount >= this.reconnectOptions.maxReconnectAttempts) {\n      this._retryConnection('next');\n      return;\n    }\n    if (this.reconnectOptions.reconnectionDelay < this.reconnectOptions.maxReconnectionDelay) {\n      let newDelay = this.reconnectOptions.minReconnectionDelay * this.reconnectOptions.retryCount;\n      this.reconnectOptions.reconnectionDelay = newDelay;\n      this.socket.io.reconnectionDelay(newDelay);\n      this.socket.io.reconnectionDelayMax(newDelay);\n    }\n    this.reconnectOptions.retryCount++;\n    this.Logger.log(eventTypes.RECONNECT_ATTEMPT, this.reconnectOptions)\n  }\n\n  _onDisconnect(reason) {\n    this.connected = false;\n    this.Logger.log(eventTypes.DISCONNECT, reason);\n    this._connect('next')\n  }\n\n  _onKeepAlive(data) {\n    if (typeof data === 'object' && data.errorCode !== 0) {\n      this._initSocketConnection();\n      return\n    }\n    if (data && this.connected) {\n      this.Logger.log(eventTypes.KEEP_ALIVE_RESPONSE);\n      this._lastEventTimestamp = new Date().getTime()\n    } else {\n      this._initSocketConnection();\n    }\n  }\n\n  async _onLoginResponse(data) {\n    if (data.Client) {\n      await loadExternalScript(data.Client)\n    }\n    if (data.URL) {\n      this.server = {\n        Priority: 0,\n        Domain: data.URL.replace('https://', '')\n      }\n    }\n    if (data.URLList && Array.isArray(data.URLList)) {\n      this.servers = data.URLList.map((url, index) => {\n        return {\n          Priority: index,\n          Domain: url.replace('https://', '')\n        }\n      })\n    }\n    if (data.Token) {\n      this.options.token = data.Token;\n      this.token = data.Token\n      await this._connect('default', true)\n    }\n\n    if (data.RefreshToken) {\n      this.options.refreshToken = data.RefreshToken\n      this._handleTokenExpiry()\n    }\n    if (data.TokenExpiry) {\n      this.options.tokenExpiry = data.TokenExpiry\n    }\n  }\n\n  _handleTokenExpiry() {\n    const date = new Date(this.options.tokenExpiry)\n    if (!isValidDate(date)) {\n      return\n    }\n    const timeout = date.getTime() - new Date().getTime() - 5000 // 5 seconds before expire\n    setTimeout(async () => {\n      const res = await refreshToken(this.options.refreshTokenUrl, this.options.refreshToken)\n      await this._onLoginResponse(res)\n    }, timeout)\n  }\n\n  _parsePacket(packet) {\n    if (!packet.data) {\n      return {};\n    }\n    let name = packet.data[0];\n    let data = packet.data[1];\n    return {\n      name,\n      data\n    };\n  }\n\n  async _connect(server = 'default', skipLogin = false) {\n    let serverToConnect = null;\n    if (server === 'default') {\n      serverToConnect = this._findCurrentServer();\n    } else if (server === 'next') {\n      serverToConnect = this._findNextAvailableServer()\n    } else if (server === 'prev') {\n      serverToConnect = this._findMaxPriorityServer()\n    } else {\n      throw new Error(`Incorrect 'server' parameter passed to connect function ${server}. Should be 'default' or 'next'`)\n    }\n    if (!serverToConnect) {\n      this.server = this._findCurrentServer();\n    }\n    this._initSocketConnection();\n    this._initSocketEvents();\n    this._initKeepAlive();\n    this._initReconnectDelays();\n    if (skipLogin) {\n      return\n    }\n    await this.login(this.options.loginType)\n  }\n\n  _checkInit() {\n    if (!this.connectionEstablished) {\n      throw new Error('Make sure you call \"sdk.init()\" before doing other operations.')\n    }\n  }\n\n  _initSocketConnection() {\n    let domain = this.server.Domain;\n    let protocol = this.options.protocol;\n    let url = `${protocol}://${domain}`;\n    this.Logger.log('Connecting to..', url);\n    this.closeAllConnections();\n    const options = {\n      ...this.options,\n      debug: false\n    }\n    if (this.token) {\n      options.query = {\n        token: this.token\n      }\n    }\n    this.socket = window.io(url, options);\n    allConnections.push(this.socket);\n    this.connectionEstablished = true;\n  }\n\n  _initSocketEvents() {\n    this.socket.onevent = this._onEvent.bind(this)\n  }\n\n  _initKeepAlive() {\n    if (this.keepAliveInterval) {\n      clearInterval(this.keepAliveInterval)\n    }\n\n    if (this.idleInterval) {\n      clearInterval((this.idleInterval))\n    }\n    this.keepAliveInterval = setInterval(async () => {\n      const now = new Date().getTime()\n      const delta = this.options.keepAliveTimeout * 2\n\n      if (now > this.getLastEventTimestamp() + delta) {\n        await this._connect('next', true)\n        return\n      }\n      if (!this.socket) {\n        this._initSocketConnection();\n        return\n      }\n      if (now > this.getLastEventTimestamp() + this.options.keepAliveTimeout) {\n        this.emit(eventTypes.KEEP_ALIVE, this.options.token);\n      }\n\n    }, this.options.keepAliveTimeout);\n\n    this.idleInterval = setInterval(() => {\n      this.reSync(false)\n    }, this.options.idleInterval)\n  }\n\n  _findCurrentServer() {\n    let server = null;\n    if (this.servers.length) {\n      server = this.servers[0];\n    }\n    this.server = server;\n    if (!this.server) {\n      this.server = this.options.fallbackServer\n    }\n    return this.server;\n  }\n\n  _findNextAvailableServer() {\n    let currentServerPriority = this.server.Priority;\n    this.Logger.log(`Failover -> Trying to find another server`);\n    if (currentServerPriority === this.servers.length - 1) {\n      return this._findMaxPriorityServer()\n    }\n    let nextServerPriority = currentServerPriority + 1\n    let nextServer = this.servers.find(server => server.Priority === nextServerPriority);\n    if (!nextServer) {\n      nextServer = this._findMaxPriorityServer();\n      if (!nextServer) {\n        return\n      }\n    }\n    if (this.server.Domain !== nextServer.Domain) {\n      this.server = nextServer;\n      return this.server\n    }\n    this.Logger.log(`Failover -> Found new server. Connecting to it...`, this.server);\n    return null\n  }\n\n  _findMaxPriorityServer() {\n    this.Logger.log(`Fallback -> Trying to find previous server`, '_findMaxPriorityServer');\n    let maxPriorityServer = getServerWithHighestPriority(this.servers);\n    if (!this.server) {\n      this.server = maxPriorityServer;\n      return this.server\n    }\n    if (this.server && maxPriorityServer.Domain !== this.server.Domain) {\n      this.server = maxPriorityServer;\n      this.Logger.log(`Fallback -> Trying to find previous server`, this.server);\n      return this.server\n    }\n    return null\n  }\n\n  async _getServers() {\n    // Ignore server fetch if we have a list of servers passed via options\n    if (this.options.serverFetchStrategy === 'static' && this.argumentOptions.servers && Array.isArray(this.argumentOptions.servers) && this.argumentOptions.servers.length > 1) {\n      this.servers = this.argumentOptions.servers\n    }\n  }\n\n  _onEvent(packet) {\n    if (!packet.data) {\n      return;\n    }\n    let evt = this._parsePacket(packet);\n    this.Logger.log(`New event -> ${evt.name}`, evt);\n    this._lastEventTimestamp = new Date().getTime()\n    this._listenersMap.forEach((callback, eventName) => {\n      if (eventName === '*') {\n        callback(evt);\n      } else if (evt.name === eventName) {\n        callback(evt);\n      }\n    })\n    const eventMappings = {\n      [eventTypes.RECONNECT_ATTEMPT]: this._onReconnectAttempt,\n      [eventTypes.RECONNECT_FAILED]: this._onReconnectFailed,\n      [eventTypes.CONNECT]: this._onConnect,\n      [eventTypes.DISCONNECT]: this._onDisconnect,\n      [eventTypes.ERROR]: this._onError,\n      [eventTypes.CONNECT_ERROR]: this._onConnectError,\n      [eventTypes.CONNECT_TIMEOUT]: this._onConnectTimeout,\n      [eventTypes.KEEP_ALIVE_RESPONSE]: this._onKeepAlive,\n      [eventTypes.LOGIN_RESPONSE]: this._onLoginResponse,\n      [eventTypes.EXTENSION_UPDATED]: this._reSync,\n      [eventTypes.QUEUES_UPDATED]: this._reSync,\n      [eventTypes.DIALERS_UPDATED]: this._reSync,\n      [eventTypes.LOGIN_STATUS]: () => {\n        if (!this.connected) {\n          this._onConnect()\n        }\n      }\n    };\n    const eventHandler = eventMappings[evt.name];\n    if (eventHandler && typeof eventHandler === 'function') {\n      eventHandler.call(this, evt.data);\n    }\n    if (this._handleLocalEvents) {\n      handleStoreEvents({\n        eventData: evt,\n        ...this.options\n      });\n    }\n  }\n\n  /**\n   * Initializes socket connection. Should be called before any other action\n   * @return {Promise<boolean>}\n   */\n  async init() {\n    if (this.connectionEstablished) {\n      return true;\n    }\n    if (this.socket) {\n      this.emit(eventTypes.CLOSE);\n    }\n    await this._getToken();\n    await this.login(this.options.loginType)\n    await this._getServers();\n    return true;\n  }\n\n  /**\n   * Sets the monitor code token\n   * @param token\n   */\n  async setToken(token) {\n    this.options.token = token\n    this.disconnect()\n    await this.init()\n  }\n\n  /**\n   * Closes all existing connections\n   */\n  closeAllConnections() {\n    allConnections.forEach(connection => {\n      connection.close()\n      connection.disconnect()\n    })\n    allConnections = []\n    if (this.socket) {\n      this.socket.disconnect()\n      this.socket = null\n    }\n  }\n\n  /**\n   * Disconnects the socket instance from the servers\n   */\n  disconnect() {\n    this._listenersMap = new Map();\n    this.closeAllConnections()\n  }\n\n  /**\n   * Listens for new events\n   * @param {string} eventName (name of the event, * for all events)\n   * @param {function} callback (callback function when even with the specified name is received)\n   */\n  on(eventName, callback) {\n    this._listenersMap.set(eventName, callback);\n    this._checkInit()\n  }\n\n  /**\n   * Emits an event to the server\n   * @param {string} eventName (name of the event)\n   * @param {object} data (data for the event)\n   */\n\n  emit(eventName, data = {}) {\n    this._checkInit();\n    this.Logger.log(`EMIT -> ${eventName}`, data);\n    this.socket.emit(eventName, data);\n  }\n\n  /**\n   * Calls resync event to resync socket data\n   * @param cache\n   */\n  reSync(cache = true) {\n    this.emit(eventTypes.RESYNC, { cache })\n  }\n\n  async setMonitorUrl(url) {\n    const oldUrl = this.options.url\n    const oldStrategy = this.options.serverFetchStrategy\n    try {\n      if (!url) {\n        return\n      }\n      this.options.url = url\n      this.options.serverFetchStrategy = 'remote'\n      await this.init()\n    } catch (err) {\n      this._onError(err)\n      this.options.url = oldUrl\n      this.options.serverFetchStrategy = oldStrategy\n      await this.init()\n    }\n  }\n\n  _getToken() {\n    const { loginType } = this.options\n    this.token = this.options.token;\n    if (loginType === 'token') {\n      if (!this.token) {\n        throw new Error('Token login type expects the token option to be provided');\n      }\n    }\n  }\n\n  /**\n   * Login (logs in based on the token/credentials provided)\n   * @param type (login type. Can be token/user/code/account)\n   * @return {Promise<void>}\n   */\n  login(type = 'token') {\n    // throttle login for 1 second\n    const delay = 1000;\n    if (this._lastLoginTimestamp + delay > new Date().getTime()) {\n      return Promise.resolve()\n    }\n    this._lastLoginTimestamp = new Date().getTime()\n    return new Promise(async (resolve, reject) => {\n      try {\n        let url = getExternalLoginUrl(this.options.loginUrl, type)\n        const res = await externalLogin(url, {\n          token: this.options.token,\n          email: this.options.email,\n          username: this.options.username,\n          password: this.options.password\n        })\n        await this._onLoginResponse(res)\n        resolve(res)\n      } catch (err) {\n        this.servers = this.argumentOptions.servers || defaultServers;\n        reject(err)\n      }\n    });\n  }\n\n}\n\nexport default EventsSDK;\n","export function loadExternalScript(url) {\n  return new Promise((resolve) => {\n    const script = document.createElement('script');\n    script.src = url;\n    script.onload = () => {\n      resolve();\n    };\n    script.onerror = () => {\n      reject();\n    };\n    document.body.append(script);\n  });\n}\n","export function getServerWithHighestPriority(servers) {\n  // Highest priority server is the one with lowest Priority value\n  let chosenServer = null\n  let maxPriority = Number.MAX_SAFE_INTEGER\n  servers.forEach(server => {\n    if (server.Priority < maxPriority) {\n      maxPriority = server.Priority\n      chosenServer = server\n    }\n  })\n  return chosenServer\n}\n\nexport function isValidDate(date) {\n  return !isNaN(date.getTime())\n}\n","export async function externalLogin(url, { email, password, token, username }) {\n  let body = null\n  if (token) {\n    body = JSON.stringify({ token })\n  } else if (username) {\n    body = JSON.stringify({\n      username,\n      password\n    })\n  } else {\n    body = JSON.stringify({\n      email,\n      pin: password\n    })\n  }\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body,\n  });\n  const data = await res.json();\n  if (data.error) {\n    throw new Error(data.error)\n  }\n  return data.Data.Socket;\n}\n\nexport function getExternalLoginUrl(baseUrl, loginType) {\n  if (loginType === 'user') {\n    return `${baseUrl}/User`\n  } else if (loginType === 'token') {\n    return `${baseUrl}/Token`\n  } else if (loginType === 'account') {\n    return `${baseUrl}/Account`\n  }\n  return baseUrl\n}\n\nexport async function refreshToken(url, oldRefreshToken) {\n  const res = await fetch(url, {\n    method: 'GET',\n\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${oldRefreshToken}`\n    }\n  });\n  return res.json();\n}\n","const version = '__VERSION__'\nimport sdk from './sdk'\nif (typeof window !== 'undefined') {\n  // Make it available on window\n  window.EventsSDK = sdk\n}\n\nexport default sdk\n"],"names":["LOGIN_STATUS","LOGIN","LOGIN_USER","LOGIN_CODE","LOGIN_ACCOUNT","LOGIN_RESPONSE","QUEUE_EVENT","QUEUES_UPDATED","DIALERS_UPDATED","EXTENSION_EVENT","EXTENSION_UPDATED","ALL_EXTENSION_STATUS","CONNECT","CONNECT_ERROR","CONNECT_TIMEOUT","DISCONNECT","PONG","RECONNECT","RECONNECT_ATTEMPT","RESYNC","RECONNECTING","RECONNECT_ERROR","RECONNECT_FAILED","KEEP_ALIVE","KEEP_ALIVE_RESPONSE","CLOSE","ERROR","defaultServers","Logger","options","debug","message","data","toLog","JSON","stringify","now","Date","toUTCString","console","log","error","this","_log","_error","value","type","global","Object","freeSelf","self","freeGlobal","Function","root","Symbol","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","undefined","isOwn","call","tag","unmasked","e","result","nullTag","undefinedTag","getRawTag","objectToString","symbolTag","isObjectLike","baseGetTag","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","isSymbol","isObject","other","valueOf","replace","isBinary","test","slice","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","toNumber","cancel","flush","offlineEvents","eventTypes","NEWCALL","ANSWER","HANGUP","onNewEvent","eventData","store","extensionsModuleName","queuesModuleName","name","commit","event","includes","isSocketOffline","dispatch","extensions","extension","reason","ivrid","ivruniqueid","extensionIndex","state","findIndex","userID","index","queues","queue","queueIndex","all","QueueID","callStatuses","HOLD_STATUS","types","isCallOnHold","status","callstatus","toLowerCase","answered","namespaced","serverTime","serverDelta","serverOffset","offlineSocketTimestamp","mutations","splice","servertimeoffset","servertime","getTime","actions","setExtensions","updateExtension","getters","isNaN","extensionsWithCalls","hideLoggedOutUsers","groupedExtensions","forEach","calls","length","filter","push","representativeStatus","extensionCountByStatus","el","setQueues","updateQueue","queueWithActiveCalls","Calls","allQueueCalls","allCalls","filterQueuesByIds","queueIds","Array","isArray","defaultOptions","url","fallbackServer","Domain","Priority","loginUrl","refreshTokenUrl","servers","token","loginType","forceNew","reconnectionDelay","reconnectionDelayMax","maxReconnectAttempts","timeout","keepAliveTimeout","idleInterval","protocol","transports","upgrade","serverFetchStrategy","serverType","allConnections","listenersMap","Map","EventsSDK","argumentOptions","Error","server","socket","connected","connectionEstablished","_lastEventTimestamp","_initReconnectOptions","_listenersMap","_retryConnection","debounce","_connect","bind","reconnectOptions","_lastLoginTimestamp","_handleLocalEvents","_registerExtensionsModule","_registerQueueModule","emit","cache","moduleName","_validateStoreModule","registerModule","extensionsModule","queuesModule","unregisterModule","retryCount","minReconnectionDelay","maxReconnectionDelay","_initReconnectDelays","minReconnectDelay","io","err","newDelay","_typeof","errorCode","_initSocketConnection","Client","Promise","resolve","script","document","createElement","src","onload","onerror","reject","body","append","URL","URLList","map","Token","RefreshToken","refreshToken","_handleTokenExpiry","TokenExpiry","tokenExpiry","date","isValidDate","async","res","oldRefreshToken","fetch","method","headers","json","_this","_onLoginResponse","packet","skipLogin","serverToConnect","_findCurrentServer","_findNextAvailableServer","_findMaxPriorityServer","_initSocketEvents","_initKeepAlive","login","domain","closeAllConnections","query","window","onevent","_onEvent","keepAliveInterval","clearInterval","setInterval","delta","_this2","getLastEventTimestamp","reSync","currentServerPriority","nextServerPriority","nextServer","find","chosenServer","maxPriority","maxPriorityServer","Number","MAX_SAFE_INTEGER","evt","_parsePacket","callback","eventName","eventHandler","_onReconnectAttempt","_onReconnectFailed","_onConnect","_onDisconnect","_onError","_onConnectError","_onConnectTimeout","_onKeepAlive","_reSync","_this3","handleStoreEvents","_getToken","_getServers","disconnect","init","connection","close","set","_checkInit","oldUrl","oldStrategy","baseUrl","_this4","email","password","username","pin","Data","Socket","externalLogin","sdk"],"mappings":"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"}